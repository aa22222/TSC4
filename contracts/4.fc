{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character shou2ld go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}
global int lit, big;

(cell) en(int shift, cell text, int b){
  slice c = text.begin_parse();  
  builder re = begin_cell();
  if(b){
    c~skip_bits(32);
    re~store_uint(0, 32);
  }
  repeat(c.slice_bits() / 8){
    int cur = c~load_uint(8);
    if((cur > 64) & (cur < 91)){
      re~store_uint(65 + (cur + lit) % 26, 8);
    }
    else {
      if((cur > 96) & (cur < 123)){
        re~store_uint(97 + (cur + big) % 26, 8);
      }
      else {
        re~store_uint(cur, 8);
      }
    }
  }

  if(~ c.slice_refs_empty?()) {
    return re.store_ref(en(shift, c~load_ref(), 0)).end_cell();
  }
  return re.end_cell();
}

(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  shift %= 26;
  lit = shift - 65;
  big = shift - 97;

  return en(shift, text, -1);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return caesar_cipher_encrypt(- shift, text);
}

