{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character shou2ld go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}
(slice) char(slice alpha, int ind) asm "7 INT SDSUBSTR";

(slice) f1() asm "x{00041030814307102450b183470f20449132854b173064d1b3874f1f4085123489532750a552b58b572f60c593368d5b3770e5d3b78f5f3f} SLICE";
(slice) f2() asm "b{101101110111001011101101111010111111100000} SLICE";
(slice) f3() asm "b{11110111111100111110111111101111111} SLICE";
(int) left(builder b) asm "BREMBITS";
global slice alpha;
(cell) en(int shift, builder re, slice text){
  repeat(text.slice_bits() / 8){
    int cur = text~load_uint(8) * 7;
    slice k = char(alpha, cur);
    re = re.store_uint(k.preload_uint(7), 8);
  }
  if(text.slice_refs_empty?()){
    return re.end_cell();
  }
  return re.store_ref(en(shift, begin_cell(), text.preload_ref().begin_parse())).end_cell();
}
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  shift %= 26;
  builder sd = begin_cell();
  sd = sd.store_slice(f1()).store_uint(64, 7);
  int g = shift + 65;
  repeat(26 - shift){
    sd~store_uint(g, 7);
    g += 1;
  }
  
  g = 65;
  repeat(shift){
    sd~store_uint(g, 7);
    g += 1;
  }

  sd = sd.store_slice(f2());

  g = shift + 97;
  repeat(26 - shift){
    sd~store_uint(g, 7);
    g += 1;
  }
  g = 97;
  repeat(shift){
    sd~store_uint(g, 7);
    g += 1;
  }

  sd = sd.store_slice(f3());

  alpha = sd.end_cell().begin_parse();
  builder re = begin_cell().store_uint(0, 32);
  return en(shift, re, text.begin_parse().skip_bits(32));
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return caesar_cipher_encrypt(- shift, text);
}

