{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character shou2ld go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}
(cell) en(cell text, int shift) asm "DUP -65 ADDCONST 1 SETGLOB -97 ADDCONST 2 SETGLOB  NEWC 32 INT STZEROES SWAP CTOS 32 INT SDSKIPFIRST NULL -ROT UNTIL:<{ DUP SBITS 8 INT DIV REPEAT:<{ 8 LDU  -ROT DUP 64 GTINT OVER 91 LESSINT AND IFJMP:<{ 1 GETGLOB ADD 26 INT MOD 65 ADDCONST SWAP 8 STU SWAP }> DUP 96 GTINT OVER 123 LESSINT AND IFJMP:<{ 2 GETGLOB ADD 26 INT MOD 97 ADDCONST SWAP 8 STU SWAP }> SWAP 8 STU SWAP }> DUP SREFS IFJMP:<{ LDREF  DROP CTOS NEWC SWAP 0 INT }> DROP 1 INT }> WHILE:<{ s1 PUSH ISNULL NOT }>DO<{ ENDC SWAP STREF }> ENDC SWAP DROP";

(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  shift %= 26;
  return en(text, shift);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return caesar_cipher_encrypt(- shift, text);
}

