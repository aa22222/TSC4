{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character shou2ld go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}
(slice) char(slice alpha, int ind) asm "8 INT SDSUBSTR";
(slice) tes() asm "x{000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40} SLICE";
(slice) f1() asm "x{000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40} SLICE";
(slice) f2() asm "x{5B5C5D5E5F60} SLICE";
(slice) f3() asm "x{7B7C7D7E} SLICE";

global slice alpha;
(cell) en(int shift, builder re, slice text){
  repeat(text.slice_bits() / 8){
    int cur = text~load_uint(8) * 8;
    slice k = char(alpha, cur);
    re = re.store_slice(k);
  }
  if(text.slice_refs_empty?()){
    return re.end_cell();
  }
  return re.store_ref(en(shift, begin_cell(), text.preload_ref().begin_parse())).end_cell();
}
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  shift %= 26;
  builder sd = begin_cell();
  sd = sd.store_slice(f1());
  int g = shift + 65;
  repeat(26 - shift){
    sd~store_uint(g, 8);
    g += 1;
  }
  g = 65;
  repeat(shift){
    sd~store_uint(g, 8);
    g += 1;
  }
  sd = sd.store_slice(f2());
  g = shift + 97;
  repeat(26 - shift){
    sd~store_uint(g, 8);
    g += 1;
  }
  g = 97;
  repeat(shift){
    sd~store_uint(g, 8);
    g += 1;
  }
  sd = sd.store_slice(f3());
  alpha = sd.end_cell().begin_parse();
  builder re = begin_cell().store_uint(0, 32);
  return en(shift, re, text.begin_parse().skip_bits(32));
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return caesar_cipher_encrypt(- shift, text);
}

