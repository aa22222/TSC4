{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character shou2ld go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

(cell) en(int shift, builder re, slice text, tuple t){
  repeat(text.slice_bits() / 8){
    int cur = text~load_uint(8);
    re~store_uint(t.at(cur), 8);
  }
  if(text.slice_refs_empty?()){
    return re.end_cell();
  }
  return re.store_ref(en(shift, begin_cell(), text.preload_ref().begin_parse(), t)).end_cell();
}

(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  shift %= 26;
  tuple t = empty_tuple();
  int i = 0;
  repeat(65){
    t~tpush(i);
    i += 1;
  }
  repeat(26 - shift){
    t~tpush(i + shift);
    i += 1;
  }
  repeat(shift){
    t~tpush(i - 26 + shift);
    i += 1;
  }
  repeat(6){
    t~tpush(i);
    i += 1;
  }
  repeat(26 - shift){
    t~tpush(i + shift);
    i += 1;
  }
  repeat(shift){
    t~tpush(i - 26 + shift);
    i += 1;
  }
  repeat(132){
    t~tpush(i);
    i += 1;
  }
  
  builder re = begin_cell().store_uint(0, 32);
  return en(shift, re, text.begin_parse().skip_bits(32), t);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return caesar_cipher_encrypt(- shift, text);
}

